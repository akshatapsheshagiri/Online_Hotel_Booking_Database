DROP PROCEDURE IF EXISTS CREATE_BOOKING;
DELIMITER $$
CREATE PROCEDURE CREATE_BOOKING(
	IN GUEST_ID_ INT,
    IN HOTEL_ID_ INT, 
    IN SINGLE_ INT,
    IN DOUBLE_ INT,
    IN FAMILY_ INT,
    IN MINI_SUITE_ INT,
    IN MASTER_SUITE_ INT,
    IN NUM_GUESTS_ INT,
    IN CARD_ BIGINT,
    IN CARD_TYPE_ VARCHAR(50),
    IN MEMBER_ID_ INT,
    IN FROM_DATE_ DATE,
    IN TO_DATE_ DATE
)
BEGIN
DECLARE FINISHED INT DEFAULT 0;
DECLARE P_ID_ INT DEFAULT(0);
DECLARE SINGLE_AVAIL INT;
DECLARE DOUBLE_AVAIL INT;
DECLARE FAMILY_AVAIL INT;
DECLARE MINI_AVAIL INT;
DECLARE MASTER_AVAIL INT;
DECLARE ROOM_ID_ VARCHAR(55);
DECLARE CUR_DATE DATE; 
DECLARE PAYMENT_AMOUNT_ DECIMAL(9,2);
DECLARE DISCOUNT DECIMAL(6,4);

DECLARE ROOMS_TO_BE_BOOKED 
		CURSOR FOR 
			(SELECT ROOM_ID FROM VALID WHERE ROOM_TYPE_NAME = 'SINGLE' LIMIT SINGLE_)
			UNION
			(SELECT ROOM_ID FROM VALID WHERE ROOM_TYPE_NAME = 'DOUBLE' LIMIT DOUBLE_)
			UNION
			(SELECT ROOM_ID FROM VALID WHERE ROOM_TYPE_NAME = 'FAMILY' LIMIT FAMILY_)
			UNION
			(SELECT ROOM_ID FROM VALID WHERE ROOM_TYPE_NAME = 'MINI SUITE' LIMIT MINI_SUITE_)
			UNION
			(SELECT ROOM_ID FROM VALID WHERE ROOM_TYPE_NAME = 'MASTER SUITE' LIMIT MASTER_SUITE_);
            
DECLARE CONTINUE HANDLER 
        FOR NOT FOUND SET finished = 1;
        
/*CHECKING FOR CURRENT DATE*/
SELECT CURRENT_DATE() INTO CUR_DATE;

IF (CUR_DATE > FROM_DATE_)
	THEN SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = "CANNOT BOOK ROOMS: BEFORE TODAY'S DATE";
END IF;

-- creates payment and extracts id
INSERT INTO PAYMENT(PAYMENT_TYPE_ID, PAYMENT_STATUS_ID, PAYMENT_CARD, PAYMENT_DATE) VALUES(CARD_TYPE_, 1111, CARD_, CUR_DATE);
SELECT PAYMENT_ID INTO P_ID_ FROM PAYMENT WHERE PAYMENT_ID = last_insert_id();

CALL VALID_ROOMS(FROM_DATE_, TO_DATE_, HOTEL_ID_);

-- checks that inputs do not exceed available capacity
SELECT COUNT(ROOM_TYPE_NAME) INTO SINGLE_AVAIL FROM VALID WHERE ROOM_TYPE_NAME = "SINGLE";
SELECT COUNT(ROOM_TYPE_NAME) INTO DOUBLE_AVAIL FROM VALID WHERE ROOM_TYPE_NAME = "DOUBLE";
SELECT COUNT(ROOM_TYPE_NAME) INTO FAMILY_AVAIL FROM VALID WHERE ROOM_TYPE_NAME = "FAMILY";
SELECT COUNT(ROOM_TYPE_NAME) INTO MINI_AVAIL FROM VALID WHERE ROOM_TYPE_NAME = "MINI SUITE";
SELECT COUNT(ROOM_TYPE_NAME) INTO MASTER_AVAIL FROM VALID WHERE ROOM_TYPE_NAME = "MASTER SUITE";
IF SINGLE_ > SINGLE_AVAIL OR DOUBLE_ > DOUBLE_AVAIL OR FAMILY_ > FAMILY_AVAIL 
OR MINI_SUITE_ > MINI_AVAIL OR MASTER_SUITE_ > MASTER_AVAIL 
	THEN SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'CANNOT BOOK ROOMS: SINGLE, DOUBLE, FAMILY, MINI SUITE OR MASTER SUITE
        ROOMS REQUESTED GREATER THAN AVAILABLE ROOMS';
END IF;
-- finds rooms needed to book and books them

OPEN ROOMS_TO_BE_BOOKED;
BOOK: LOOP
		FETCH ROOMS_TO_BE_BOOKED INTO ROOM_ID_;
		IF FINISHED = 1 THEN 
			LEAVE BOOK;
		END IF;
		-- CREATE BOOKINGS
		INSERT INTO BOOKING VALUES(GUEST_ID_, ROOM_ID_, P_ID_, FROM_DATE_, TO_DATE_, NUM_GUESTS_, 1);
END LOOP BOOK;
CLOSE ROOMS_TO_BE_BOOKED;
DROP TABLE VALID;

SELECT HOTEL.HOTEL_NAME, HOTEL.HOTEL_ADDRESS, CITY.CITY_NAME, HOTEL.HOTEL_ZIPCODE, STATE.STATE_NAME
FROM HOTEL 
JOIN CITY ON HOTEL.CITY_ID = CITY.CITY_ID
JOIN STATE ON CITY.STATE_ID = STATE.STATE_ID
WHERE HOTEL_ID = HOTEL_ID_;

SELECT ROOM.ROOM_ID, BOOKING.BOOKING_FROM_DATE, BOOKING.BOOKING_TO_DATE, ROOM.ROOM_TYPE_NAME
FROM BOOKING
JOIN ROOM ON BOOKING.ROOM_ID = ROOM.ROOM_ID
WHERE PAYMENT_ID = P_ID_;

SELECT DISCOUNTS
INTO DISCOUNT 
FROM GUEST
LEFT JOIN MEMBER ON GUEST.MEMBER_ID = MEMBER.MEMBER_ID
LEFT JOIN MEMBERSHIP_TIER ON MEMBER.TIER_ID = MEMBERSHIP_TIER.TIER_ID
WHERE GUEST_ID = GUEST_ID_;

SELECT SUM(ROOM_PRICE)
INTO PAYMENT_AMOUNT_
FROM ROOM_PRICE
JOIN ROOM ON ROOM_PRICE.ROOM_ID = ROOM.ROOM_ID
JOIN BOOKING ON BOOKING.ROOM_ID = ROOM_PRICE.ROOM_ID
WHERE BOOKING.PAYMENT_ID = P_ID_;

UPDATE PAYMENT
SET PAYMENT.PAYMENT_AMOUNT =
CASE
WHEN DISCOUNT IS NULL THEN PAYMENT_AMOUNT_
ELSE (1-(DISCOUNT/100))*PAYMENT_AMOUNT_
END
WHERE PAYMENT_ID = P_ID_;

SELECT PAYMENT_AMOUNT
FROM PAYMENT 
WHERE PAYMENT_ID = P_ID_;

END $$
DELIMITER ;